" ~/.vimrc

let mapleader=","

" ===================================================================
" ====  plugins  ====================================================
" ==================================================================={{{
# 'scrooloose/syntastic' "{{{
  let g:syntastic_error_symbol = '✗'
  let g:syntastic_style_error_symbol = '✠'
  let g:syntastic_warning_symbol = '∆'
  let g:syntastic_style_warning_symbol = '≈'
  noremap <Leader>S :SyntasticToggleMode<CR>
  let g:syntastic_scala_checkers = []

  let g:syntastic_always_populate_loc_list = 0
  let g:syntastic_auto_loc_list = 0
  let g:syntastic_check_on_open = 1
  let g:syntastic_check_on_wq = 0
  " let g:syntastic_haskell_checkers = ["hlint","scan"]
  let g:syntastic_haskell_checkers = ["hlint","scan","hdevtools"]
  " let g:syntastic_haskell_checkers = ["hlint","scan","hdevtools","ghc-mod"]
"}}}
" 'kien/ctrlp.vim' "{{{
  let g:ctrlp_map = '<c-p>'
  let g:ctrlp_cmd = 'CtrlP'
  let g:ctrlp_working_path_mode = 'ra'
  nnoremap <Leader>b :CtrlPBuffer<CR>
  nnoremap <Leader>p :CtrlPMRU<CR>
"}}}
"
" ===================================================================}}}
" ====  general  ====================================================
" ==================================================================={{{
set nocompatible

if has("syntax")
  syntax on
endif

if has("autocmd")
  filetype plugin on
  filetype indent on

  " completion
  set ofu=syntaxcomplete#Complete
  set completeopt=longest,menuone

  augroup someAugroup
    autocmd!
    " jump to the last position when reopening a file
    autocmd BufReadPost * if line("'\"") > 1 && line("'\"") <= line("$")
                          \ | exe "normal! g'\""
                        \ | endif
    " resize splits
    autocmd VimResized * exe "normal! \<c-w>="
    " leave paste mode, when exit insert mode
    autocmd InsertLeave * set nopaste
  augroup END
endif

" Use Unix as the standard file type
set ffs=unix,dos,mac
set encoding=utf8

set virtualedit=all
set showcmd     " Show (partial) command in status line.
set showmatch   " Show matching brackets.
"set autowrite  " Automatically save before commands like :next and :make
set noautowrite " don't automagically write on :next"
set visualbell  " ausgehebelt durch noerrorbells ?
set noerrorbells
set hidden
set autoread
set magic       " For regular expressions turn magic on
set splitbelow  " set splitright
set autochdir

set lazyredraw
set viewoptions=folds,options,cursor,unix,slash     "unix/windows compatibility

set restorescreen=on

" ====  wildmenu  ==================================================={{{
set complete=.,w,b,u,U,t,i,d    " do lots of scanning on tab completion"

set wildmenu "Kommando Zeilen Vervollständigung
"set wildignore=*.dll,*.o,*.obj,*.bak,*.exe,*.pyc,*.jpg,*.gif,*.png
set wildignore=*.dll,*.o,*.obj,*.exe,*.hi,*.pyc,
  \*.bak,*.bac,
  \*.jpg,*.gif,*.png,
  \*.aux,*.bbl,*.blg,*.fdb_latexmk,*.fls,*.idx,*.ilg,*.ind,*.nlo,*.toc,
  \*.cmi,*.cmx,*.cmo
set wildmode=list:longest

" Suffixes that get lower priority when doing tab completion for filenames.
" These are files we are not likely to want to edit or read.
set suffixes=.bak,.bac,~,.swp,.o,.info,.aux,.log,.dvi,.bbl,.blg,.brf,.cb,.ind,
  \.idx,.ilg,.inx,.out,.toc
"                                                                    }}}
" ====  sessioning  ================================================={{{

set ssop-=options    " do not store global and local values in a session
set ssop-=folds      " do not store folds
"                                                                    }}}
" ====  scrolling  =================================================={{{

set scrolljump=5
set scrolloff=5         "Start scrolling when we're x lines away from margins
set sidescrolloff=10
set sidescroll=1
set display+=lastline
"                                                                    }}}
" ====  search  ====================================================={{{

" highlight searches, searches begin immediately
set hlsearch
set incsearch
set smartcase " case sensitiv, if a uppercase letter is contained
set ignorecase
"                                                                    }}}
" ====  folding / indenting  ========================================{{{

"default folding
set foldmethod=marker
set foldmarker={{{,}}}
set foldlevel=99
"set foldlevelstart=99

" indending
set autoindent
set smartindent
set shiftwidth=4 softtabstop=4 tabstop=4 expandtab
set smarttab
"                                                                    }}}
" ====  list  ======================================================={{{

set list
set listchars=tab:>.,trail:…,extends:#,nbsp:. " …°⎼
"set listchars=tab:│\ ,trail:•,extends:❯,precedes:❮
"set fillchars=vert:┃,diff:⎼,fold:⎼
set fillchars=vert:┃,diff:\ ,fold:\

set cpoptions+=n
set showbreak=\ \ \ ↳

"                                                                    }}}
" ====  performance  ================================================{{{

set ttyfast

" for powersave, stops the blinking cursor
let &guicursor = &guicursor . ",a:blinkon0"
" Speed hack
hi NonText cterm=NONE ctermfg=NONE
" " stops slow responding in large files
" set synmaxcol=128
"                                                                    }}}
" ====  line numberig  =============================================={{{
set nu
" ====  backup / undo  =============================================={{{

set history=3000
set undolevels=3000

" Keep undo history across sessions, by storing in file.
if exists('+undofile')
  execute "silent !mkdir " . expand("~/.undodir/") . " > /dev/null 2>&1"
  set undofile
  let &undodir=expand("~/.undodir/")
endif

" swap
set swapfile
set dir=/tmp " tmpfs

" no backup!
set nobackup

" ====  spelling  ==================================================={{{
setlocal nospell
set spelllang=de_de,en_us

"                                                                    }}}
" ===================================================================}}}
" ====  appearance  =================================================
" ==================================================================={{{

set title

set cursorline
set nocursorcolumn " hat probleme mit acp (Popup)

set textwidth=80    " Don't wrap lines by default
let &foldcolumn=(&columns - &textwidth - 2) / 2
let &synmaxcol=max([128, &columns])
augroup mySidepaddingAugroup
  autocmd!
  autocmd VimResized * let &foldcolumn=(&columns - &textwidth - 2) / 2
  autocmd VimResized * let &synmaxcol=max([128, &columns])
augroup END

set nowrap
set ruler

set showmode "show when you are in insert mode

" statusline
set laststatus=2

set statusline=%<%f\          " custom statusline
set stl+=[%{&ff}]             " show fileformat
set stl+=%y%m%r%=
set stl+=%-14.(%l,%c%V%)\ %P

if has("gui_running")
  set guioptions+=t " tear off menu items
  set guioptions-=T " no toolbar
  set guioptions+=c " Use console messages instead of GUI dialogs
else
  set t_Co=256
endif

" ====  hilight to long lines  ======================================
if exists('+colorcolumn')
    set colorcolumn=80
else
    highlight OverLength ctermbg=red ctermfg=white guibg=#592929
    match OverLength /\%81v.\+/
endif


if has('spell') " Set spell hilighting =============================={{{
  highlight clear SpellBad
  highlight SpellBad term=standout ctermfg=1
  highlight SpellBad term=underline cterm=underline
  highlight clear SpellCap
  highlight SpellCap term=underline cterm=underline
  highlight clear SpellRare
  highlight SpellRare term=underline cterm=underline
  highlight clear SpellLocal
  highlight SpellLocal term=underline cterm=underline
endif " =============================================================}}}

" ===================================================================}}}
" ====  keymappings / input  ========================================
" ==================================================================={{{
if has("mouse")
  set mouse=nv
  set mousehide
endif
set backspace=indent,eol,start

"nnoremap ; :

" ====  general  ===================================================={{{
"save without sudo
cnoremap w!! w !sudo tee % >/dev/null

"Make Y behave like other capitals
noremap Y y$

"Reload vimrc
nnoremap <Leader>r :source $MYVIMRC

"nnoremap <silent> <leader>ev :tabedit $MYVIMRC<CR>
nnoremap <silent> <leader>ev :e $MYVIMRC<CR>
"nnoremap <silent> <leader>sv :so $MYVIMRC<CR>

" Pressing ,ss will toggle and untoggle spell checking
"noremap <leader>ss :setlocal spell!<cr>

" Make < > shifts keep selection
vnoremap < <gv
vnoremap > >gv

" clear hilighting
nnoremap <silent> <leader>/ :nohlsearch<CR>

set pastetoggle=<F11>

" easyer increment/decrement
nnoremap + <C-a>
nnoremap - <C-x>

"                                                                    }}}
" ====  maps to nop  ================================================{{{
inoremap <PageUp> <nop>
" nnoremap <PageUp> <nop>
" vnoremap <PageUp> <nop>
inoremap <PageDown> <nop>
" nnoremap <PageDown> <nop>
" vnoremap <PageDown> <nop>

nnoremap K <nop>

inoremap <F1> <nop>
nnoremap <F1> <nop>
vnoremap <F1> <nop>

inoremap <F2> <nop>
inoremap <F3> <nop>
inoremap <F4> <nop>

inoremap <F6> <nop>
inoremap <F7> <nop>
inoremap <F8> <nop>
inoremap <F9> <nop>

inoremap <F12> <nop>

" remove warning
nnoremap <c-c> <nop>

"                                                                    }}}
" ====  formatting  ================================================={{{
" Use Q for formatting the current paragraph (or selection)
vnoremap <leader>Q gq
nnoremap <leader>Q gqap

" Search and replace
nnoremap <Leader>s :%s/\<<C-r><C-w>\>//g<Left><Left>
" Search and change
nnoremap _s :%s/\<<C-r><C-w>\>/<C-r><C-w>/g<Left><Left>

" Word to UPPERCASE
inoremap <c-u> <esc>viwUi
nnoremap <c-u> viwUw

" souround with quotes
nnoremap <leader>" viw<esc>a"<esc>hbi"<esc>lel
nnoremap <leader>' viw<esc>a'<esc>hbi'<esc>lel

"                                                                    }}}
" ====  buffer  ====================================================={{{
"Open last/alternate buffer
noremap <Leader><Leader> <C-^>

noremap <silent> <F1> :split<CR>
noremap <silent> <F2> :vsplit<CR>
noremap <silent> <F3> :tabnew<CR>
noremap <silent> <F4> :close<CR>

noremap <silent> <F5> :update<CR>
inoremap <silent> <F5> <Esc>:update<CR>
vnoremap <silent> <F5> <Esc>:update<CR>

" Use arrow key to change buffer
noremap <silent> <F7> :bp<CR>
noremap <silent> <F8> :bn<CR>
noremap <silent> <F9> :bd<CR>

" for fast quitting
noremap <silent> <F10> :q!<CR>
inoremap <silent> <F10> <Esc>:q!<CR>

"                                                                    }}}
" ====  movement  ==================================================={{{
" go back to last cursor position
nnoremap <leader>- ``

" jump to next row instead of next line
nnoremap j gj
nnoremap k gk

nnoremap <c-j> 5j
nnoremap <c-k> 5k

" control-left & right arrows switch between tabs
noremap <c-Left> :tabp<CR>
noremap <c-Right> :tabn<CR>

"                                                                    }}}
" ====  testing  ===================================================={{{
function! FoldColumnToggle()
  if &foldcolumn
    setlocal foldcolumn=0
  else
    setlocal foldcolumn=4
  endif
endfunction
nnoremap <leader>f :call FoldColumnToggle()<cr>

"                                                                    }}}
" ===================================================================}}}
" ====  functions  ==================================================
" ==================================================================={{{

" stolen from: https://github.com/bling/dotvim/blob/master/vimrc
function! Preserve(command) "{{{
  " preparation: save last search, and cursor position.
  let _s=@/
  let l = line(".")
  let c = col(".")
  " do the business:
  execute a:command
  " clean up: restore previous search history, and cursor position
  let @/=_s
  call cursor(l, c)
endfunction "}}}

" ====  for cleanup  ================================================{{{
"for cleaning
nnoremap <leader>T :set expandtab<cr>:retab!<cr>

" delete all trails
" use :call DeleteTrailing
" or <Leader>dt
function! DeleteTrailing()
  if 0
    exe "normal mz"
    %s/\s\+$//ge
    exe "normal `z"
  else
    "new implementation
    call Preserve("%s/\\s\\+$//e")
  endif
endfunction
nnoremap <Leader>dt :call DeleteTrailing()<cr>

" DeleteTrailing and more
function! Cleanup()
  call DeleteTrailing()
  setlocal ff=unix
  setlocal expandtab
  retab!
endfunction
nnoremap <Leader>dT :call Cleanup()

"                                                                    }}}
" ====  open files via ranger  ======================================{{{
function! RangerChooser()
  exec "silent !ranger --choosefile=/tmp/chosenfile " . expand("%:p:h")
  if filereadable('/tmp/chosenfile')
    exec 'edit ' . system('cat /tmp/chosenfile')
    call system('rm /tmp/chosenfile')
  endif
  redraw!
endfunction
noremap ,R :call RangerChooser()<CR>

"                                                                    }}}
function! MyBigLeftPadding()
  let &foldcolumn = (&columns - &textwidth) / 2
endfunction
" ===================================================================}}}
" ====  abbreviations  ==============================================
" ==================================================================={{{

cnoreabbrev <expr> W ((getcmdtype() is# ':' && getcmdline() is# 'W')?('w'):('W'))
cnoreabbrev <expr> Q ((getcmdtype() is# ':' && getcmdline() is# 'Q')?('q'):('Q'))

" handy abbreviations
iabbrev @@ mail@maximilian-huber.de
iabbrev VGr Viele Grüße<cr>Maximilian
iabbrev BRr Best regards<cr>Maximilian
iabbrev KRr Kind regards<cr>Maximilian
iabbrev vlt vielleicht
iabbrev mgl möglicherweise
iabbrev mglw möglicherweise

" correct some typos
iabbrev adn and

" ===================================================================}}}
" ====  filetype specific  ==========================================
" ==================================================================={{{
" most filetype specific is coantained in the files under ftplugin/

if has("autocmd")
  augroup vimrc_autocmds
    autocmd!
    autocmd FileType human setlocal wrap tw=79 linebreak
    autocmd FileType text  setlocal wrap tw=79 linebreak
    autocmd FileType txt   setlocal wrap tw=79 linebreak
    " in makefiles, don't expand tabs to spaces
    autocmd FileType make  setlocal noexpandtab shiftwidth=8
  augroup END

  augroup Shebang
    autocmd!
    " Shell Sript:
    autocmd BufNewFile *.sh 0put =\"#!/usr/bin/env bash\"|$
    " Python Sript:
    autocmd BufNewFile *.py 0put =\"#!/usr/bin/env python\<nl># -*- coding: iso-8859-15 -*-\<nl>\"|$
    " Ruby Script:
    autocmd BufNewFile *.rb 0put =\"#!/usr/bin/env ruby\<nl># -*- coding: None -*-\<nl>\"|$
    " Perl Sript:
    autocmd BufNewFile *.pl 0put =\"#!/usr/bin/env perl\<nl>\<nl>use strict;\<nl>use warnings;\<nl>\"|$
    " Perl Module:
    autocmd BufNewFile *.pm 0put =\"package ;\<nl>\<nl>use strict;\<nl>use warnings;\<nl>\"|$
    " Lisp Sript:
    autocmd BufNewFile *.cl 0put =\"#!/usr/bin/env clisp\<nl>\"|$
    autocmd BufNewFile *.lisp 0put =\"#!/usr/bin/env clisp\<nl>\"|$
  augroup END

  " Transparent editing of gpg encrypted files.                         {{{
  " Placed Public Domain by Wouter Hanegraaff <wouter@blub.net>
  " (asc support and sh -c"..." added by Osamu Aoki)
  augroup aencrypted
    autocmd!
    " First make sure nothing is written to ~/.viminfo while editing
    " an encrypted file.
    autocmd BufReadPre,FileReadPre      *.asc set viminfo=
    " We don't want a swap file, as it writes unencrypted data to disk
    autocmd BufReadPre,FileReadPre      *.asc set noswapfile
    " Switch to binary mode to read the encrypted file
    autocmd BufReadPre,FileReadPre      *.asc set bin
    autocmd BufReadPre,FileReadPre      *.asc let ch_save = &ch|set ch=2
    autocmd BufReadPost,FileReadPost    *.asc '[,']!sh -c "gpg --decrypt 2> /dev/null"
    " Switch to normal mode for editing
    autocmd BufReadPost,FileReadPost    *.asc set nobin
    autocmd BufReadPost,FileReadPost    *.asc let &ch = ch_save|unlet ch_save
    autocmd BufReadPost,FileReadPost    *.asc execute ":doautocmd BufReadPost " . expand("%:r")
    " Convert all text to encrypted text before writing
    autocmd BufWritePre,FileWritePre    *.asc   '[,']!sh -c "gpg --default-recipient-self -ae 2>/dev/null"
    " Undo the encryption so we are back in the normal text, directly
    " after the file has been written.
    autocmd BufWritePost,FileWritePost    *.asc   u
  augroup END
  augroup bencrypted
    autocmd!
    " First make sure nothing is written to ~/.viminfo while editing
    " an encrypted file.
    autocmd BufReadPre,FileReadPre      *.gpg set viminfo=
    " We don't want a swap file, as it writes unencrypted data to disk
    autocmd BufReadPre,FileReadPre      *.gpg set noswapfile
    " Switch to binary mode to read the encrypted file
    autocmd BufReadPre,FileReadPre      *.gpg set bin
    autocmd BufReadPre,FileReadPre      *.gpg let ch_save = &ch|set ch=2
    autocmd BufReadPost,FileReadPost    *.gpg '[,']!sh -c "gpg --decrypt 2> /dev/null"
    " Switch to normal mode for editing
    autocmd BufReadPost,FileReadPost    *.gpg set nobin
    autocmd BufReadPost,FileReadPost    *.gpg let &ch = ch_save|unlet ch_save
    autocmd BufReadPost,FileReadPost    *.gpg execute ":doautocmd BufReadPost " . expand("%:r")
    " Convert all text to encrypted text before writing
    autocmd BufWritePre,FileWritePre    *.gpg   '[,']!sh -c "gpg --default-recipient-self --armor -ev 2>/dev/null"
    " Undo the encryption so we are back in the normal text, directly
    " after the file has been written.
    autocmd BufWritePost,FileWritePost    *.gpg   u
  augroup END
endif
"                                                                    }}}
" ===================================================================}}}

" vim:set ts=2 sw=2 sts=2 et fenc=utf-8 ff=unix foldmethod=marker foldlevel=0 foldmarker={{{,}}}:
